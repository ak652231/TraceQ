generator client {
  provider = "prisma-client-js"
  output   = "../generated/postgres"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  Regular
  Police
}

model User {
  id    String  @id @default(cuid())
  name  String?
  email String? @unique
  phone String?
  role  Role    @default(Regular)

  police PoliceDetails?

  accounts Account[]
  sessions Session[]
}

model PoliceDetails {
  id         String   @id @default(cuid())
  userId     String   @unique @db.Uuid
  fullName   String
  email      String   @unique
  phone      String
  dob        DateTime
  badgeId    String   @unique
  rank       String
  station    String
  department String
  district   String
  state      String
  idFront    String
  idBack     String
  verified   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
