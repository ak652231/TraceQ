generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  regular
  police
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model MissingPerson {
  id                String   @id @default(uuid()) @db.Uuid 
  userId            String   @db.Uuid  // The family member who reported
  handledByPoliceId String?  @db.Uuid
  fullName          String
  age               Int
  gender            String
  photo             String
  
  behavioralTraits  String?  
  healthConditions  String?   
  lastSeenLocation  String
  lastSeenDate      DateTime
  lastSeenTime      String
  lat               Float     
  lng               Float      
  height            Float
  heightUnit        String   @default("cm") 
  weight            Float
  weightUnit        String   @default("kg")
  hairColor         String  
  eyeColor          String  
  clothingWorn      String  
  identifyingMarks  String? 
  additionalPhotos  String[] 
  reporterName      String
  isSeen            Boolean @default(false)
  relationship      String
  mobileNumber      String
  emailAddress      String? 
  aadhaarImage      String
  status             String   @default("Pending") 
  createdAt         DateTime @default(now())

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sightingReports   SightingReport[] 
  police            PoliceDetails? @relation(fields: [handledByPoliceId], references:[userId], onDelete: Cascade)
  
  notification Notification[]
}

model SightingReport {
  id                 String   @id @default(uuid()) @db.Uuid
  missingPersonId    String   @db.Uuid
  reportedByUserId   String   @db.Uuid
  verifiedByPoliceId String?  @db.Uuid
  sightingDate       DateTime @default(now()) 
  sightingTime       String   
  sightingLat        Float    
  sightingLng        Float  
  sightingName       String?  
  locationDetails    String  
  appearanceNotes    String  
  behaviorNotes      String?  
  identifyingMarks   String  
  reporterPhoto      String   // User-uploaded photo
  originalPhoto     String  // AI-matched missing person's photo
  reporterHeat       String  // Face embedding of uploaded sighting image
  originalHeat       String  // Face embedding of matched missing person's image
  matchPercentage     Float
  analysis           String
  seenWith           String?  
  verifiedByFamily  Boolean? 
  isSentVerification  Boolean @default(false)
  showUser    Boolean @default(false)
  status             String   @default("Pending") 
  createdAt          DateTime @default(now())

  missingPerson      MissingPerson @relation(fields: [missingPersonId], references: [id], onDelete: Cascade)
  reporter           User  @relation(fields: [reportedByUserId], references: [id])
  verifiedBy         PoliceDetails? @relation(fields: [verifiedByPoliceId], references: [userId])

  familyInteractions FamilyInteraction?
  policeActions      PoliceAction?
  notification Notification[]
}

model FamilyInteraction {
  id                String   @id @default(uuid()) @db.Uuid
  sightingReportId  String   @db.Uuid @unique
  response          FamilyAction
  notes             String?  // Additional details from interaction
  createdAt         DateTime @default(now())

  sightingReport    SightingReport @relation(fields: [sightingReportId], references: [id], onDelete: Cascade)
}

enum PoliceActionType {
  NOTIFIED_FAMILY
  SENT_TEAM
  SOLVED
  REJECT
}

enum FamilyAction {
  CONFIRMED
  DENIED
}

model PoliceAction {
  id                 String   @id @default(uuid()) @db.Uuid
  sightingReportId   String   @db.Uuid @unique
  policeId           String   @db.Uuid // Links to the police officer
  actionTaken        PoliceActionType // Only "Notified Family", "Sent Team", or "Closed Case"
  remarks            String?   // Extra details if needed
  createdAt          DateTime @default(now())

  sightingReport     SightingReport @relation(fields: [sightingReportId], references: [id], onDelete: Cascade)
  policeOfficer      PoliceDetails  @relation(fields: [policeId], references: [userId])
}

model User {
  id            String @id @default(uuid()) @db.Uuid  
  name          String?
  email         String? @unique
  phone         String?
  role          Role @default(regular)
  emailVerified DateTime?
  police        PoliceDetails?
  accounts      Account[]
  sessions      Session[]
  sightingReports SightingReport[]
  missingPersons MissingPerson[]
  notification Notification[]
}

model PoliceDetails {
  id        String @id @default(uuid()) @db.Uuid
  userId             String  @db.Uuid @unique
  fullName    String
  email       String  @unique
  phone       String
  dob         DateTime
  badgeId     String  @unique
  rank        String
  department  String
  station     String
  lat         Float
  lng         Float
  district    String
  state       String
  idFront     String  
  idBack      String  
  verified    Boolean @default(false)

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sightingReportsVerified SightingReport[] 
  policeActions PoliceAction[]
  missingAssigned MissingPerson[]
}

model Notification {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid // User who receives the notification
  sightingReportId String @db.Uuid
  missingPersonId String @db.Uuid
  type          NotificationType
  message       String
  isRead        Boolean  @default(false) // To track if the notification badge should appear
  createdAt     DateTime @default(now())

  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sightingReport SightingReport @relation(fields: [sightingReportId], references: [id], onDelete: Cascade)
  missingPerson      MissingPerson @relation(fields: [missingPersonId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  POLICE_ACTION_UPDATE
  FAMILY_ACTION_UPDATE
}
